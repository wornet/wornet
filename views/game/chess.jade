extends ../layouts/user

block append link
    link(rel="stylesheet" href="/components/chessboard/css/chessboard-0.3.0.css")

block body
    h3(style="text-align: center;")=s("Partie d'échecs avec {friend}", {friend: friend.fullName})
    #board(style="max-width: 400px; margin: auto;")
    div(style="text-align: center;")
        #board-info
        button.btn#board-reset=s("Réinitialiser (abandon)")
    div(ng-controller="GameCtrl" ng-hide="sent" style="max-width: 400px; margin: auto; padding-top: 15px;")
        p=s("Invitez {friend} à vous rejoindre via le chat :", {friend: friend.fullName})
        +data('game-with', friend.publicInformations())
        +form()(ng-submit="invite()")
            textarea.form-control(ng-model="message")
            input(type="submit" value=s("Inviter")).btn.btn-primary
    div(ng-controller="ChessHistoryCtrl")
        div(style="max-width: 400px;margin: auto; padding-top: 15px;" ng-if="history.length")
            h3 Historique des parties
            p(ng-repeat="game in history | orderBy : 'date' : true")
                | {{ game.date | date }}
                =" &nbsp; "
                strong(ng-if="game.abandon && isMe(game.abandon)")
                    =s("Vous avez abandonné")
                strong(ng-if="game.abandon && !isMe(game.abandon)")
                    =s("{friend} a abandonné", {friend: friend.fullName})
block append js
    script(src="/components/chessboard/js/chessboard-0.3.0.js")
    script(src="/game/chess.min.js")
    script(src="/api/mm/momentum.min.js")
    script
        :coffee
            Wornet.controller 'ChessHistoryCtrl', ['$scope', ($scope) ->
                selectedSquare = null
                lastMove =
                    piece: null
                    distance: 0
                    origin: null
                    target: null
                movedPieces = {}
                friend = getData 'game-with'
                me = getCachedData 'me'
                ids = [
                    me
                    friend.hashedId
                ].sort()
                couple = ids.join '_'
                chessMoves = 'chessMoves_' + couple
                chessGames = 'chessGames_' + couple
                COLUMNS = 'abcdefgh'.split ''
                board = ChessBoard 'board',
                    position: 'start'
                game = new Chess()
                momentum = new Momentum()
                momentum.onReady ->
                    momentum.getCollection chessGames, (games) ->
                        $scope.isMe = (id) -> id is me
                        $scope.history = games
                        games.onInsert ->
                            $scope.$apply()
                        momentum.getCollection chessMoves, (moves) ->
                            s = textReplacements
                            isWhiteTurn = -> game.turn() is 'w'
                            iPlayingWhite = -> ids[games.length % 2] is me
                            isMyTurn = -> isWhiteTurn() is iPlayingWhite()
                            setInfo = (message) ->
                                data =
                                    color: if isWhiteTurn() then s("blancs") else s("noirs")
                                    player: if isMyTurn() then s("vous") else friend.name.first
                                $('#board-info').html(
                                    s("À {player} de jouer, traits aux {color}", data) +
                                    '<br>' +
                                    message
                                )
                            triggerMove = (from, to) ->
                                moveCode = from + '-' + to
                                $reset.prop 'disabled', false
                                game.move moveCode
                                board.move moveCode
                                moves.insertOne
                                    from: from
                                    to: to
                                    code: moveCode
                            move = (data) ->
                                lastMove = data
                                movedPieces[data.from] = true
                                if data.piece.charAt(1) is 'P' and data.distance is Math.SQRT2 and !positionPieceColor data.target
                                    piece = positionToCode
                                        x: data.target.x
                                        y: data.origin.y
                                    triggerMove piece, data.to
                                triggerMove data.from, data.to
                            positionToCode = (pos) ->
                                COLUMNS[pos.x - 1] + pos.y
                            codeToPosition = (code) ->
                                x: COLUMNS.indexOf(code.charAt(0).toLowerCase()) + 1
                                y: code.substr(1) | 0
                            positionPieceColor = (pos) ->
                                (board.position()[positionToCode(pos)] || '').charAt(0)
                            isClearWay = (origin, target) ->
                                if origin.x isnt target.x
                                    dir = (target.x - origin.x) / Math.abs target.x - origin.x
                                    for ix in [origin.x + dir...target.x]
                                        if positionPieceColor(
                                            x: ix
                                            y: Math.round(origin.y + (target.y - origin.y) * (ix - origin.x) / (target.x - origin.x))
                                        )
                                            return false
                                else
                                    dir = (target.y - origin.y) / Math.abs target.y - origin.y
                                    for iy in [origin.y + dir...target.y]
                                        if positionPieceColor(
                                            x: Math.round(origin.x + (target.x - origin.x) * (iy - origin.y) / (target.y - origin.y))
                                            y: iy
                                        )
                                            return false
                                return true
                            isAllowed =
                                k: (origin, target) ->
                                    Math.pow(origin.x - target.x, 2) + Math.pow(origin.y - target.y, 2) < 4
                                n: (origin, target) ->
                                    Math.pow(origin.x - target.x, 2) + Math.pow(origin.y - target.y, 2) is 5
                                b: (origin, target) ->
                                    Math.abs(origin.x - target.x) is Math.abs(origin.y - target.y) and isClearWay origin, target
                                r: (origin, target) ->
                                    (origin.x is target.x or origin.y is target.y) and isClearWay origin, target
                                q: (origin, target) ->
                                    @r(origin, target) or @b(origin, target)
                                p: (origin, target, color, lastMove) ->
                                    x = target.x
                                    y = target.y
                                    goAhead = x is origin.x and !positionPieceColor target
                                    if color is 'w'
                                        if Math.abs(x - origin.x) is 1 and origin.y + 1 is y
                                            if 'b' is positionPieceColor(target) or (
                                                lastMove.piece is 'bP' and
                                                    lastMove.distance is 2 and
                                                    (lastMove.target or {}).x is x and
                                                    y is 6
                                            )
                                                return true
                                        goAhead and (origin.y + 1 is y or (origin.y is 2 and y is 4 and !positionPieceColor
                                            x: x
                                            y: 3
                                        ))
                                    else
                                        if Math.abs(x - origin.x) is 1 and origin.y - 1 is y
                                            if 'w' is positionPieceColor(target) or (
                                                lastMove.piece is 'wP' and
                                                    lastMove.distance is 2 and
                                                    (lastMove.target or {}).x is x and
                                                    y is 3
                                            )
                                                return true
                                        goAhead and (origin.y - 1 is y or (origin.y is 7 and y is 5 and !positionPieceColor
                                            x: x
                                            y: 6
                                        ))
                            squares = '#board .square-55d63'
                            initMoves = ->
                                $.each moves, () ->
                                    game.move @
                                    return
                                board.position game.fen()
                                return
                            moves.onInsert (event) ->
                                game.move event.item.code
                                board.move event.item.code
                                return
                            moves.onRemove ->
                                $reset.prop 'disabled', true
                                game = new Chess()
                                board.start()
                                initMoves()
                            $reset = $('#board-reset').click ->
                                game = new Chess()
                                board.start()
                                moves.remove {}
                                return
                            $reset.prop 'disabled', !moves.length
                            initMoves()
                            setInfo ''
                            $(squares).click ->
                                $square = $ @
                                code = $square.data 'square'
                                origin = codeToPosition code
                                positions = board.position()
                                piece = positions[code]
                                if $square.hasClass 'highlight-green'
                                    info = game.move
                                        from: selectedSquare
                                        to: code
                                        promotion: 'q'
                                    setInfo '<pre>' + JSON.stringify(info, null, 2) + '</pre>'
                                    $(squares).removeClass 'highlight-yellow highlight-green'
                                    previousOrigin = codeToPosition selectedSquare
                                    move
                                        piece: positions[selectedSquare]
                                        from: selectedSquare
                                        to: code
                                        origin: previousOrigin
                                        target: origin
                                        distance: Math.sqrt(Math.pow(previousOrigin.x - origin.x, 2) + Math.pow(previousOrigin.y - origin.y, 2))
                                    return
                                selectedSquare = code
                                $(squares).removeClass 'highlight-yellow highlight-green'
                                unless piece
                                    return
                                pieceColor = piece.charAt(0).toLowerCase()
                                pieceType = piece.charAt(1).toLowerCase()
                                console.log [pieceColor, game.turn()] 
                                if pieceColor isnt game.turn()
                                    return
                                $square.addClass 'highlight-yellow'
                                $(squares).each ->
                                    $target = $ @
                                    targetSquare = $target.data 'square'
                                    if code is targetSquare
                                        return true
                                    target = codeToPosition targetSquare
                                    if pieceColor is positionPieceColor target
                                        return true
                                    if isAllowed[pieceType] origin, target, pieceColor, lastMove
                                        $target.addClass 'highlight-green'
            
                                    return true
                                return
                            return
                        return
                    return
                return
            ]
