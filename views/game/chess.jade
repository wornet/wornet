extends ../layouts/user

block append link
    link(rel="stylesheet" href="/components/chessboard/css/chessboard-0.3.0.css")

block body
    section.loading
        h3(style="text-align: center;")=s("Partie d'échecs avec {friend}", {friend: friend.fullName})
        #board.center-medium-panel
        div(style="text-align: center;")
            #board-info.center-medium-panel.top-padding
            button.btn#board-reset=s("Réinitialiser (abandon)")
        div.center-medium-panel.top-padding(ng-controller="GameCtrl" ng-hide="sent")
            p=s("Invitez {friend} à vous rejoindre via le chat :", {friend: friend.fullName})
            +data('game-with', friend.publicInformations())
            +form()(ng-submit="invite()")
                textarea.form-control(ng-model="message")
                input.btn.btn-primary(type="submit" value=s("Inviter"))
        div(ng-controller="ChessHistoryCtrl")
            div.center-medium-panel.top-padding(ng-if="history.length")
                h3 Historique des parties
                p(ng-repeat="game in history | orderBy : 'date' : true")
                    | {{ game.date | date : 'medium' }}
                    !=" &nbsp; "
                    strong {{ getDescription(game) }}

block append js
    script(src="/components/chessboard/js/chessboard-0.3.0.js")
    script(src="/game/chess.min.js")
    script(src="/api/mm/momentum.min.js")
    script
        :coffee
            Wornet.controller 'ChessHistoryCtrl', ['$scope', '$filter', ($scope, $filter) ->
                window.$filter = $filter
                selectedSquare = null
                lastMove =
                    piece: null
                    distance: 0
                    origin: null
                    target: null
                movedPieces = {}
                friend = getData 'game-with'
                me = getCachedData 'me'
                ids = [
                    me
                    friend.hashedId
                ].sort()
                couple = ids.join '_'
                chessMoves = 'chessMoves_' + couple
                chessGames = 'chessGames_' + couple
                COLUMNS = 'abcdefgh'.split ''
                board = ChessBoard 'board',
                    position: 'start'
                game = new Chess()
                momentum = new Momentum()
                momentum.onReady ->
                    momentum.getCollection chessGames, (games) ->
                        s = textReplacements
                        $scope.getDescription = (game) ->
                            isMe = game.user is me
                            iMTheLast = isMe is game.myTurn
                            if game.checkmate
                                if iMTheLast
                                    s("{friend} vous a mis échec et mat.", {friend: friend.name.full})
                                else
                                    s("Vous avez mis {friend} échec et mat.", {friend: friend.name.full})
                            else if game.draw
                                s("Pat.")
                            else if game.stalemate
                                s("Partie nulle (impasse).")
                            else if game.stalemate
                                s("Partie nulle (trois répétitions).")
                            else if isMe
                                s("Vous avez abandonné.")
                            else
                                s("{friend} a abandonné.", {friend: friend.name.full})
                        
                        $scope.$apply ->
                            $scope.history = games
                        games.onInsert ->
                            delay 200, ->
                                $scope.$apply()
                        momentum.getCollection chessMoves, (moves) ->
                            movesCount = moves.length
                            isWhiteTurn = -> game.turn() is 'w'
                            isPlayingWhite = -> ids[games.length % 2] is me
                            isMyTurn = -> isWhiteTurn() is isPlayingWhite()
                            resetButton = (disabled, text) ->
                                $reset.prop('disabled', disabled).text(text)
                            enableResetButton = (text) ->
                                resetButton(false, text)
                            disableResetButton = (text) ->
                                resetButton(true, text)
                            localRecordMove = (data) ->
                                lastMove = data
                                movedPieces[data.from] = true
                                moveCode = data.from + '-' + data.to
                                $reset.prop 'disabled', false
                                $.extend {code: moveCode}, data
                            move = (data) ->
                                moveInfo = localRecordMove data
                                board.position game.fen()
                                movesCount++
                                moves.insertOne moveInfo
                            positionToCode = (pos) ->
                                COLUMNS[pos.x - 1] + pos.y
                            codeToPosition = (code) ->
                                x: COLUMNS.indexOf(code.charAt(0).toLowerCase()) + 1
                                y: code.substr(1) | 0
                            positionPieceColor = (pos) ->
                                (board.position()[positionToCode(pos)] || '').charAt(0)
                            isClearWay = (origin, target) ->
                                if origin.x isnt target.x
                                    dir = (target.x - origin.x) / Math.abs target.x - origin.x
                                    for ix in [origin.x + dir...target.x]
                                        if positionPieceColor(
                                            x: ix
                                            y: Math.round(origin.y + (target.y - origin.y) * (ix - origin.x) / (target.x - origin.x))
                                        )
                                            return false
                                else
                                    dir = (target.y - origin.y) / Math.abs target.y - origin.y
                                    for iy in [origin.y + dir...target.y]
                                        if positionPieceColor(
                                            x: Math.round(origin.x + (target.x - origin.x) * (iy - origin.y) / (target.y - origin.y))
                                            y: iy
                                        )
                                            return false
                                return true
                            isAllowed =
                                castling: (origin, target, color) ->
                                    unless target.x in [3, 7]
                                        false
                                    else
                                        r =
                                            x: if target.x > 4 then 8 else 1
                                            y: target.y
                                        if color is 'w'
                                            target.y is 1 and !movedPieces['e1'] and !movedPieces[positionToCode r] and isClearWay(origin, r)
                                        else
                                            target.y is 8 and !movedPieces['e8'] and !movedPieces[positionToCode r] and isClearWay(origin, r)
                                k: (origin, target, color) ->
                                    Math.pow(origin.x - target.x, 2) + Math.pow(origin.y - target.y, 2) < 4 or
                                    @castling origin, target, color
                                n: (origin, target) ->
                                    Math.pow(origin.x - target.x, 2) + Math.pow(origin.y - target.y, 2) is 5
                                b: (origin, target) ->
                                    Math.abs(origin.x - target.x) is Math.abs(origin.y - target.y) and isClearWay origin, target
                                r: (origin, target) ->
                                    (origin.x is target.x or origin.y is target.y) and isClearWay origin, target
                                q: (origin, target) ->
                                    @r(origin, target) or @b(origin, target)
                                p: (origin, target, color, lastMove) ->
                                    x = target.x
                                    y = target.y
                                    goAhead = x is origin.x and !positionPieceColor target
                                    if color is 'w'
                                        if Math.abs(x - origin.x) is 1 and origin.y + 1 is y
                                            if 'b' is positionPieceColor(target) or (
                                                lastMove and
                                                lastMove.piece is 'bP' and
                                                lastMove.distance is 2 and
                                                (lastMove.target or {}).x is x and
                                                y is 6
                                            )
                                                return true
                                        goAhead and (origin.y + 1 is y or (origin.y is 2 and y is 4 and !positionPieceColor
                                            x: x
                                            y: 3
                                        ))
                                    else
                                        if Math.abs(x - origin.x) is 1 and origin.y - 1 is y
                                            if 'w' is positionPieceColor(target) or (
                                                lastMove and
                                                lastMove.piece is 'wP' and
                                                lastMove.distance is 2 and
                                                (lastMove.target or {}).x is x and
                                                y is 3
                                            )
                                                return true
                                        goAhead and (origin.y - 1 is y or (origin.y is 7 and y is 5 and !positionPieceColor
                                            x: x
                                            y: 6
                                        ))
                            updateStatus = (message) ->
                                status = ''
                                message ||= ''
                                ended = false
                                if game.in_checkmate()
                                    ended = true
                                    status = if isMyTurn()
                                        s("Vous êtes échec et mat.")
                                    else
                                        s("{friend} est échec et mat.", {friend: friend.name.first})
                                else if game.in_check()
                                    status = if isMyTurn()
                                        s("Vous êtes en échec.")
                                    else
                                        s("{friend} est en échec.", {friend: friend.name.first})
                                else if game.in_draw()
                                    ended = true
                                    status = s("Pat. Partie terminée.")
                                else if game.in_stalemate()
                                    ended = true
                                    status = s("Partie nulle (impasse).")
                                else if game.in_threefold_repetition()
                                    ended = true
                                    status = s("Partie nulle (trois répétitions).")
                                if ended
                                    enableResetButton s("Relancer une partie")
                                else
                                    resetButton !moves.length, s("Relancer une partie (abandon)")
                                status &&= '<div>' + status + '</div>'
                                message &&= '<div>' + message.trim() + '</div>'
                                status += message
                                lastError = $('.errors .alert-warning:first').html() or ''
                                if status and lastError.trim() isnt status.trim()
                                    $('.errors').warnings status
                                data =
                                    color: if isWhiteTurn() then s("blancs") else s("noirs")
                                    player: if isMyTurn() then s("vous") else friend.name.first
                                $('#board-info').html(
                                    '<div>' +
                                        s("À {player} de jouer, traits aux {color}", data) +
                                    '</div>' +
                                    status
                                )
                            initMoves = ->
                                lastMove = null
                                $.each moves, () ->
                                    lastMove = @
                                    game.move @
                                    return
                                board.position game.fen()
                                updateStatus()
                                return
                            squares = '#board .square-55d63'
                            lastInsertCallback = ->
                            newGamePending = false
                            newGameInstanciated = false
                            moves.onInsert (event) ->
                                lastInsertCallback = ->
                                    newGameInstanciated = false
                                    movesCount = moves.length
                                    localRecordMove event.item
                                    game.move event.item
                                    board.position game.fen()
                                    updateStatus()
                                    return
                                unless newGamePending
                                    lastInsertCallback()
                                    lastInsertCallback = ->
                                return
                            moves.onRemove ->
                                unless newGameInstanciated
                                    newGamePending = true
                                    disableResetButton s("Relancer une partie (abandon)")
                                    updateStatus(
                                        s("Votre adversaire a relancé une nouvelle partie.") +
                                        '<button class="btn btn-primary ok-reset corner-button">' +
                                            s("OK") +
                                        '</button>'
                                    )
                                return
                            $('.ok-reset').click ->
                                game = new Chess()
                                board.start()
                                lastInsertCallback()
                                return
                            $reset = $('#board-reset').click ->
                                game = new Chess()
                                board.start()
                                updateStatus()
                                newGameInstanciated = true
                                moves.remove {}
                                return
                            initMoves()
                            updateStatus()
                            $(squares).click ->
                                if game.game_over() or !isMyTurn()
                                    return
                                $square = $ @
                                code = $square.data 'square'
                                origin = codeToPosition code
                                positions = board.position()
                                piece = positions[code]
                                if $square.hasClass 'highlight-green'
                                    previousPiece = positions[selectedSquare]
                                    previousPieceType = previousPiece.charAt(1).toLowerCase()
                                    previousOrigin = codeToPosition selectedSquare
                                    distance = Math.sqrt Math.pow(previousOrigin.x - origin.x, 2) + Math.pow(previousOrigin.y - origin.y, 2)
                                    flags = if previousPieceType is 'k' and distance is 2
                                        if origin.x > 4
                                            'k'
                                        else
                                            'q'
                                    else
                                        if previousPieceType is 'p' and distance is Math.SQRT2 and !positionPieceColor origin
                                            'e'
                                        else
                                            null
                                    moveInfo =
                                        from: selectedSquare
                                        to: code
                                        piece: previousPiece
                                        origin: previousOrigin
                                        target: origin
                                        distance: distance
                                        promotion: if previousPieceType is 'p' then 'q' else null
                                        flags: flags
                                    info = game.move moveInfo
                                    unless info
                                        return
                                    $(squares).removeClass 'highlight-yellow highlight-green'
                                    move moveInfo
                                    return
                                selectedSquare = code
                                $(squares).removeClass 'highlight-yellow highlight-green'
                                unless piece
                                    return
                                pieceColor = piece.charAt(0).toLowerCase()
                                pieceType = piece.charAt(1).toLowerCase()
                                if pieceColor isnt game.turn()
                                    return
                                $square.addClass 'highlight-yellow'
                                $(squares).each ->
                                    $target = $ @
                                    targetSquare = $target.data 'square'
                                    if code is targetSquare
                                        return true
                                    target = codeToPosition targetSquare
                                    if pieceColor is positionPieceColor target
                                        return true
                                    if isAllowed[pieceType] origin, target, pieceColor, lastMove
                                        $target.addClass 'highlight-green'
            
                                    return true
                                return
                            return
                        return
                    return
                return
            ]
