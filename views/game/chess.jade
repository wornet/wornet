extends ../layouts/user

block append link
    link(rel="stylesheet" href="/components/chessboard/css/chessboard-0.3.0.css")

block body
    h3(style="text-align: center;")=s("Partie d'échecs avec {friend}", {friend: friend.fullName})
    #board(style="max-width: 400px; margin: auto;")
    div(data-chat-with=friend.publicInformations() style="display: none;")
        ="#goto[/game/chess/" + user.hashedId + ' ' + s("Une partie d'échecs ?") + ']'

block append js
    script(src="/components/chessboard/js/chessboard-0.3.0.js")
    script
        :coffee
            selectedSquare = null
            lastMove =
                piece: null
                distance: 0
                origin: null
                target: null
            movedPieces = {}
            COLUMNS = 'abcdefgh'.split ''
            window.board = ChessBoard 'board',
                position: 'start'
            move = (data) ->
                lastMove = data
                movedPieces[data.from] = true
                if data.piece.charAt(1) is 'P' and data.distance is Math.SQRT2 and !positionPieceColor data.target
                    piece = positionToCode
                        x: data.target.x
                        y: data.origin.y
                    board.move piece + '-' + data.to
                board.move data.from + '-' + data.to
            positionToCode = (pos) ->
                COLUMNS[pos.x - 1] + pos.y
            codeToPosition = (code) ->
                x: COLUMNS.indexOf(code.charAt(0).toLowerCase()) + 1
                y: code.substr(1) | 0
            positionPieceColor = (pos) ->
                (board.position()[positionToCode(pos)] || '').charAt(0)
            isClearWay = (origin, target) ->
                if origin.x isnt target.x
                    dir = (target.x - origin.x) / Math.abs target.x - origin.x
                    for ix in [origin.x + dir...target.x]
                        if positionPieceColor(
                            x: ix
                            y: Math.round(origin.y + (target.y - origin.y) * (ix - origin.x) / (target.x - origin.x))
                        )
                            return false
                else
                    dir = (target.y - origin.y) / Math.abs target.y - origin.y
                    for iy in [origin.y + dir...target.y]
                        if positionPieceColor(
                            x: Math.round(origin.x + (target.x - origin.x) * (iy - origin.y) / (target.y - origin.y))
                            y: iy
                        )
                            return false
                return true
            isAllowed =
                k: (origin, target, color) ->
                    Math.pow(origin.x - target.x, 2) + Math.pow(origin.y - target.y, 2) < 4
                n: (origin, target) ->
                    Math.pow(origin.x - target.x, 2) + Math.pow(origin.y - target.y, 2) is 5
                b: (origin, target) ->
                    Math.abs(origin.x - target.x) is Math.abs(origin.y - target.y) and isClearWay origin, target
                r: (origin, target) ->
                    (origin.x is target.x or origin.y is target.y) and isClearWay origin, target
                q: (origin, target) ->
                    @r(origin, target) or @b(origin, target)
                p: (origin, target, color, lastMove) ->
                    x = target.x
                    y = target.y
                    goAhead = x is origin.x and !positionPieceColor target
                    if color is 'w'
                        if Math.abs(x - origin.x) is 1 and origin.y + 1 is y
                            if 'b' is positionPieceColor(target) or (
                                lastMove.piece is 'bP' and
                                lastMove.distance is 2 and
                                (lastMove.target or {}).x is x and
                                y is 6
                            )
                                return true
                        goAhead and (origin.y + 1 is y or (origin.y is 2 and y is 4 and !positionPieceColor
                            x: x
                            y: 3
                        ))
                    else
                        if Math.abs(x - origin.x) is 1 and origin.y - 1 is y
                            if 'w' is positionPieceColor(target) or (
                                lastMove.piece is 'wP' and
                                lastMove.distance is 2 and
                                (lastMove.target or {}).x is x and
                                y is 3
                            )
                                return true
                        goAhead and (origin.y - 1 is y or (origin.y is 7 and y is 5 and !positionPieceColor
                            x: x
                            y: 6
                        ))
            squares = '#board .square-55d63'
            $(squares).click ->
                $square = $ @
                code = $square.data 'square'
                origin = codeToPosition code
                positions = board.position()
                piece = positions[code]
                if $square.hasClass 'highlight-green'
                    $(squares).removeClass 'highlight-yellow highlight-green'
                    previousOrigin = codeToPosition selectedSquare
                    move
                        piece: positions[selectedSquare]
                        from: selectedSquare
                        to: code
                        origin: previousOrigin
                        target: origin
                        distance: Math.sqrt(Math.pow(previousOrigin.x - origin.x, 2) + Math.pow(previousOrigin.y - origin.y, 2))
                    return
                selectedSquare = code
                $(squares).removeClass 'highlight-yellow highlight-green'
                unless piece
                    return
                pieceColor = piece.charAt(0).toLowerCase()
                pieceType = piece.charAt(1).toLowerCase()
                $square.addClass 'highlight-yellow'
                $(squares).each ->
                    $target = $ @
                    targetSquare = $target.data 'square'
                    if code is targetSquare
                        return true
                    target = codeToPosition targetSquare
                    if pieceColor is positionPieceColor target
                        return true
                    if isAllowed[pieceType] origin, target, pieceColor, lastMove
                        $target.addClass 'highlight-green'

                    return true
